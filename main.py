import logging
import os
import pytesseract
import sqlite3
from datetime import datetime
from PIL import Image
from io import BytesIO
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

from utils.ocr import extract_text_from_image
from utils.parser import parse_receipt_text
from db.database import init_db, insert_expense, get_daily_summary

TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ —á–µ–∫–∞. /summary ‚Äî –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    image = Image.open(BytesIO(photo_bytes))
    text = extract_text_from_image(image)
    logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{text}")

    items = parse_receipt_text(text)
    if not items:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–µ–∫. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–µ —Ñ–æ—Ç–æ.")
        return

    total = 0
    for name, price, category in items:
        insert_expense(update.effective_user.id, name, price, category)
        total += price

    reply_lines = [f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(items)} –ø–æ–∑–∏—Ü—ñ–π. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω"]
    for name, price, category in items:
        reply_lines.append(f"{name}: {price:.2f} –≥—Ä–Ω ({category})")
    await update.message.reply_text("\n".join(reply_lines))

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_daily_summary(update.effective_user.id)
    if not data:
        await update.message.reply_text("–©–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç.")
        return

    lines = ["üìä –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:"]
    total = 0
    for category, amount in data:
        lines.append(f"{category}: {amount:.2f} –≥—Ä–Ω")
        total += amount
    lines.append(f"–ó–∞–≥–∞–ª–æ–º: {total:.2f} –≥—Ä–Ω")
    await update.message.reply_text("\n".join(lines))

# –û–Ω–æ–≤–ª–µ–Ω–∏–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫—É:
import asyncio

if __name__ == "__main__":
    async def main():
        app = ApplicationBuilder().token(TOKEN).build()
        await app.bot.delete_webhook(drop_pending_updates=True)
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("summary", summary))
        app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        await app.run_polling()

    asyncio.run(main())
