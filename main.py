import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InputFile, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from parsers.xml_parser import parse_xml_file, parse_xml_string, parse_xml_url
from utils.db import init_db, save_items_to_db, get_report, get_debug_info, delete_check_by_id, delete_item_by_id
from utils.categories import categorize

BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = "/data/expenses.db"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

WAITING_NAME, WAITING_PRICE = range(2)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
DELETE_CHECK_ID = "DELETE_CHECK"
DELETE_ITEM_ID = "DELETE_ITEM"
REPORT_ALL_FROM = "REPORT_ALL_FROM"
REPORT_ALL_TO = "REPORT_ALL_TO"

info_keyboard = ReplyKeyboardMarkup([["üí° Info"]], resize_keyboard=True)

# === –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç –ø–æ —á–µ–∫–∞—Ö.\n\n"
        "üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/info ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
        "/report_day ‚Äî –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/report_week ‚Äî –∑–≤—ñ—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        "/report_mounth ‚Äî –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/report_all ‚Äî –∑–≤—ñ—Ç –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥\n"
        "/debug ‚Äî —Ç–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
        "/manual ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤—Ä—É—á–Ω—É\n"
        "/delete_check ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ–∫\n"
        "/delete_item ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´üí° Info¬ª, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(msg, reply_markup=info_keyboard)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# === –û–±—Ä–æ–±–∫–∞ XML ===

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.document.get_file()
    file_path = f"/tmp/{file.file_id}.xml"
    await file.download_to_drive(file_path)
    items = parse_xml_file(file_path)
    check_id = save_items_to_db(items, DB_PATH)
    await send_summary(update, items, check_id)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if context.user_data.get("manual_in_progress"):
        await update.message.reply_text("‚ùó –ü—Ä–æ–¥–æ–≤–∂—ñ—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∞–±–æ —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /cancel.")
        return

    if text.lower().startswith("http"):
        items = parse_xml_url(text)
    elif "<?xml" in text:
        items = parse_xml_string(text)
    elif text == "üí° Info":
        await info(update, context)
        return
    else:
        await update.message.reply_text("‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ XML –∞–±–æ URL.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
        return

    check_id = save_items_to_db(items, DB_PATH)
    await send_summary(update, items, check_id)

async def send_summary(update, items, check_id):
    if not items:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ —Ü—å–æ–º—É —á–µ–∫—É.")
        return
    text = f"‚úÖ –î–æ–¥–∞–Ω–æ —á–µ–∫ #{check_id}:\n"
    total = 0
    for item in items:
        text += f"‚Ä¢ {item['name']} ({item['category']}) ‚Äî {item['sum'] / 100:.2f} –≥—Ä–Ω\n"
        total += item['sum']
    text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total / 100:.2f} –≥—Ä–Ω"
    await update.message.reply_text(text)

# === –í—Ä—É—á–Ω—É ===

async def manual_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["manual_in_progress"] = True
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    return WAITING_NAME

async def manual_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['manual_data'] = {'name': update.message.text}
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 23.50):")
    return WAITING_PRICE

async def manual_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ:")
        return WAITING_PRICE

    name = context.user_data['manual_data']['name']
    category = categorize(name)
    now = datetime.now()
    item = {
        "date": now.strftime("%Y-%m-%d"),
        "name": name,
        "category": category,
        "sum": int(price * 100)
    }
    check_id = save_items_to_db([item], DB_PATH)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {name} ({category}) ‚Äî {price:.2f} –≥—Ä–Ω")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# === –í–∏–¥–∞–ª–µ–Ω–Ω—è ===

async def delete_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID —á–µ–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    return DELETE_CHECK_ID

async def delete_check_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    check_id = update.message.text.strip()
    success = delete_check_by_id(DB_PATH, check_id)
    msg = "‚úÖ –ß–µ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ." if success else "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ–∫."
    await update.message.reply_text(msg)
    return ConversationHandler.END

async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    return DELETE_ITEM_ID

async def delete_item_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item_id = update.message.text.strip()
    success = delete_item_by_id(DB_PATH, item_id)
    msg = "‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ." if success else "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä."
    await update.message.reply_text(msg)
    return ConversationHandler.END

# === –ó–≤—ñ—Ç–∏ ===

async def report_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_report(update, "day")

async def report_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_report(update, "week")

async def report_mounth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_report(update, "month")

async def report_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑ (–†–†–†–†-–ú–ú-–î–î):")
    return REPORT_ALL_FROM

async def report_all_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["from_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ (–†–†–†–†-–ú–ú-–î–î):")
    return REPORT_ALL_TO

async def report_all_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from_date = context.user_data.get("from_date")
    to_date = update.message.text.strip()
    await send_report(update, "custom", from_date, to_date)
    return ConversationHandler.END

async def send_report(update, period, from_date=None, to_date=None):
    report = get_report(DB_PATH, period, from_date, to_date)
    if not report:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
        return
    text = "üìä –ó–≤—ñ—Ç:\n"
    total = 0
    for cat, s in report.items():
        text += f"‚Ä¢ {cat}: {s / 100:.2f} –≥—Ä–Ω\n"
        total += s
    text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total / 100:.2f} –≥—Ä–Ω"
    await update.message.reply_text(text)

# === Debug ===

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = get_debug_info(DB_PATH)
    msg = f"üì¶ –ß–µ–∫—ñ–≤: {stats['checks']}\nüõí –¢–æ–≤–∞—Ä—ñ–≤: {stats['items']}"
    await update.message.reply_text(msg)

# === main ===

def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("report_day", report_day))
    app.add_handler(CommandHandler("report_week", report_week))
    app.add_handler(CommandHandler("report_mounth", report_mounth))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("manual", manual_start)],
        states={
            WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_name)],
            WAITING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_price)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("delete_check", delete_check)],
        states={DELETE_CHECK_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_check_confirm)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("delete_item", delete_item)],
        states={DELETE_ITEM_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_item_confirm)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("report_all", report_all)],
        states={
            REPORT_ALL_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_all_from)],
            REPORT_ALL_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_all_to)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()

if __name__ == "__main__":
    main()
