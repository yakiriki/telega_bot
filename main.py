import os
import logging
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from parsers.xml_parser import parse_xml_file, parse_xml_string, parse_xml_url
from utils.db import (
    init_db,
    save_items_to_db,
    get_report,
    get_debug_info,
    delete_check_by_id,
    delete_item_by_id,
)
from utils.categories import categorize
from aiohttp import web  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== –ö–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ======
WAITING_NAME, WAITING_PRICE = range(2)
DELETE_CHECK_ID = "DELETE_CHECK"
DELETE_ITEM_ID  = "DELETE_ITEM"
REPORT_ALL_FROM = "REPORT_ALL_FROM"
REPORT_ALL_TO   = "REPORT_ALL_TO"

info_keyboard = ReplyKeyboardMarkup([["üí° Info"]], resize_keyboard=True)

# ====== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
BOT_TOKEN    = os.getenv("BOT_TOKEN")
# –•–æ—Å—Ç –∏ –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º Render –∑–∞–ø—É—Å—Ç–∏—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
PORT         = int(os.getenv("PORT", "8000"))
# –ü—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram —à–ª—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –ª—é–±–æ–π, –Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π.
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", f"/{BOT_TOKEN}")
# –ü–æ–ª–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: Render –¥–∞—Å—Ç –¥–æ–º–µ–Ω –≤–∏–¥–∞ your-app.onrender.com
# –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render!
WEBHOOK_URL  = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "https://your-app.onrender.com"

# ====== –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é."""
    msg = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç –ø–æ —á–µ–∫–∞—Ö.\n\n"
        "üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/info ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
        "/report_day ‚Äî –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/report_week ‚Äî –∑–≤—ñ—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        "/report_mounth ‚Äî –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/report_all ‚Äî –∑–≤—ñ—Ç –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥\n"
        "/debug ‚Äî —Ç–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
        "/manual ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤—Ä—É—á–Ω—É\n"
        "/delete_check ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ–∫\n"
        "/delete_item ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´üí° Info¬ª, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(msg, reply_markup=info_keyboard)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç start."""
    await start(update, context)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ ======

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–∫–∞—á–∏–≤–∞–µ–º XML-—Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏–º
    file = await update.message.document.get_file()
    tmp_path = f"/tmp/{file.file_id}.xml"
    await file.download_to_drive(tmp_path)
    items = parse_xml_file(tmp_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º ID —á–µ–∫–∞ –∏ —Ç–æ–≤–∞—Ä–æ–≤
    check_id, item_ids = save_items_to_db(items)
    await send_summary(update, items, check_id, item_ids)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ‚Äî –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å
    if context.user_data.get("manual_in_progress"):
        await update.message.reply_text(
            "‚ùó –ü—Ä–æ–¥–æ–≤–∂—ñ—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /cancel."
        )
        return

    if text.lower().startswith("http"):
        items = parse_xml_url(text)
    elif "<?xml" in text:
        items = parse_xml_string(text)
    elif text == "üí° Info":
        return await info(update, context)
    else:
        return await update.message.reply_text(
            "‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ XML –∞–±–æ URL."
        )

    check_id, item_ids = save_items_to_db(items)
    await send_summary(update, items, check_id, item_ids)

async def send_summary(update, items, check_id, item_ids):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö ID."""
    if not items:
        return await update.message.reply_text(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ —Ü—å–æ–º—É —á–µ–∫—É."
        )
    text = f"‚úÖ –î–æ–¥–∞–Ω–æ —á–µ–∫ #{check_id}:\n"
    total = 0
    for item, iid in zip(items, item_ids):
        text += f"‚Ä¢ ID {iid}: {item['name']} ({item['category']}) ‚Äî {item['sum']/100:.2f} –≥—Ä–Ω\n"
        total += item["sum"]
    text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total/100:.2f} –≥—Ä–Ω"
    await update.message.reply_text(text)

# ====== –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ======

async def manual_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["manual_in_progress"] = True
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    return WAITING_NAME

async def manual_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["manual_data"] = {"name": update.message.text}
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 23.50):")
    return WAITING_PRICE

async def manual_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text.replace(",", "."))
    except ValueError:
        return await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞, —Å–ø—Ä–æ–±—É–π —â–µ:")
    name = context.user_data["manual_data"]["name"]
    category = categorize(name)
    now = datetime.now().strftime("%Y-%m-%d")
    item = {"date": now, "name": name, "category": category, "sum": int(price*100)}
    check_id, item_ids = save_items_to_db([item])
    await update.message.reply_text(
        f"‚úÖ –î–æ–¥–∞–Ω–æ: ID {item_ids[0]} ‚Äî {name} ({category}) ‚Äî {price:.2f} –≥—Ä–Ω"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ====== –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ ======

async def delete_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID —á–µ–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    return DELETE_CHECK_ID

async def delete_check_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chk_id = update.message.text.strip()
    ok = delete_check_by_id(chk_id)
    msg = "‚úÖ –ß–µ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ." if ok else "‚ùå –ß–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(msg)
    return ConversationHandler.END

async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    return DELETE_ITEM_ID

async def delete_item_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    itm_id = update.message.text.strip()
    ok = delete_item_by_id(itm_id)
    msg = "‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ." if ok else "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(msg)
    return ConversationHandler.END

# ====== –û—Ç—á—ë—Ç—ã ======

async def report_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_report("day")
    await send_report(update, data, "–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")

async def report_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_report("week")
    await send_report(update, data, "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å")

async def report_mounth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_report("month")
    await send_report(update, data, "–∑–∞ –º—ñ—Å—è—Ü—å")

async def report_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É YYYY-MM-DD:")
    return REPORT_ALL_FROM

async def report_all_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["from_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è YYYY-MM-DD:")
    return REPORT_ALL_TO

async def report_all_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fr = context.user_data.get("from_date")
    to = update.message.text.strip()
    data = get_report("custom", fr, to)
    await send_report(update, data, f"–∑ {fr} –ø–æ {to}")
    context.user_data.clear()
    return ConversationHandler.END

async def send_report(update, data, period_name):
    if not data:
        return await update.message.reply_text(f"‚ùå –î–∞–Ω—ñ –∑–∞ {period_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
    text = f"üìä –ó–≤—ñ—Ç {period_name}:\n"
    total = 0
    for cat, val in data.items():
        text += f"‚Ä¢ {cat}: {val/100:.2f} –≥—Ä–Ω\n"
        total += val
    text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total/100:.2f} –≥—Ä–Ω"
    await update.message.reply_text(text)

# ====== Debug ======

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info = get_debug_info()
    await update.message.reply_text(
        f"–ß–µ–∫–∏: {info['checks']}\n–¢–æ–≤–∞—Ä–∏: {info['items']}"
    )

# ====== HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ======

async def health(request):
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    return web.Response(text="OK")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()

    # –°—Ç—Ä–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–∫–æ–º–∞–Ω–¥—ã, –¥–∏–∞–ª–æ–≥–∏ –∏ —Ç.–¥.)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("report_day", report_day))
    application.add_handler(CommandHandler("report_week", report_week))
    application.add_handler(CommandHandler("report_mounth", report_mounth))
    application.add_handler(CommandHandler("debug", debug))

    # ConversationHandlers
    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("manual", manual_start)],
            states={
                WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_name)],
                WAITING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_price)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
    )
    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("delete_check", delete_check)],
            states={DELETE_CHECK_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_check_confirm)]},
            fallbacks=[CommandHandler("cancel", cancel)],
        )
    )
    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("delete_item", delete_item)],
            states={DELETE_ITEM_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_item_confirm)]},
            fallbacks=[CommandHandler("cancel", cancel)],
        )
    )
    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("report_all", report_all)],
            states={
                REPORT_ALL_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_all_from)],
                REPORT_ALL_TO:   [MessageHandler(filters.TEXT & ~filters.COMMAND, report_all_to)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
    )

    # XML –∏ —Ç–µ–∫—Å—Ç
    application.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # === –ó–∞–ø—É—Å–∫–∞–µ–º webhook-—Å–µ—Ä–≤–µ—Ä ===
    # Telegram –±—É–¥–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /<BOT_TOKEN>
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=f"{WEBHOOK_URL}{WEBHOOK_PATH}",
        # –î–ª—è HTTPS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ Render –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω—É–∂–Ω–æ
    )

    # === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health ===
    app = web.Application()
    app.router.add_get("/health", health)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
