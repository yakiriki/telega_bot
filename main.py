import os
import logging
# from datetime import datetime # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    # –ú—ã —É–±—Ä–∞–ª–∏ MessageHandler –∏ ConversationHandler, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
)

# –ú—ã —É–±—Ä–∞–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ë–î –∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏, –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
# from parsers.xml_parser import parse_xml_file, parse_xml_string, parse_xml_url
# from utils.db import (
#     init_db,
#     save_items_to_db,
#     get_report,
#     get_debug_info,
#     delete_check_by_id,
#     delete_item_by_id,
# )
# from utils.categories import categorize

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
# DB_URL = os.getenv("DATABASE_URL") # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
PORT      = int(os.getenv("PORT", 8443))
HOST_URL  = os.getenv("RENDER_EXTERNAL_URL")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: PORT={PORT}, HOST_URL={HOST_URL}")

info_keyboard = ReplyKeyboardMarkup([["üí° Info"]], resize_keyboard=True)

# ===== –•–µ–Ω–¥–ª–µ—Ä—ã (–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ /start –∏ /info) =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç –ø–æ —á–µ–∫–∞—Ö.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥–∏:\n"
        "/info ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
        "\n‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ /start –∏ /info. –û—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
    )
    await update.message.reply_text(msg, reply_markup=info_keyboard)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    # –ï—Å–ª–∏ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, –æ–Ω —Å–æ–æ–±—â–∏—Ç –æ–± –æ—à–∏–±–∫–µ
    if isinstance(update, Update) and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. "
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ª–æ–≥–∞—Ö Render."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


# ===== Main —Å run_webhook =====

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
    # init_db(DB_URL)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /info
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))

    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö! –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=f"/{BOT_TOKEN}",
        webhook_url=f"{HOST_URL}/{BOT_TOKEN}"
    )

if __name__ == "__main__":
    main()
