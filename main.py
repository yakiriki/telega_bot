import os
import logging
# from datetime import datetime # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ë–î –∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
# from parsers.xml_parser import parse_xml_file, parse_xml_string, parse_xml_url
# from utils.db import (
#     init_db,
#     save_items_to_db,
#     get_report,
#     get_debug_info,
#     delete_check_by_id,
#     delete_item_by_id,
# )
# from utils.categories import categorize

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_URL    = os.getenv("DATABASE_URL") # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
PORT      = int(os.getenv("PORT", 8443))
HOST_URL  = os.getenv("RENDER_EXTERNAL_URL")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: PORT={PORT}, HOST_URL={HOST_URL}")

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –Ω–æ –Ω–µ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è) =====
WAITING_NAME, WAITING_PRICE = range(2)
DELETE_CHECK_ID            = "DELETE_CHECK"
DELETE_ITEM_ID             = "DELETE_ITEM"
REPORT_ALL_FROM            = "REPORT_ALL_FROM"
REPORT_ALL_TO              = "REPORT_ALL_TO"

info_keyboard = ReplyKeyboardMarkup([["üí° Info"]], resize_keyboard=True)

# ===== –•–µ–Ω–¥–ª–µ—Ä—ã =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç –ø–æ —á–µ–∫–∞—Ö.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥–∏:\n"
        "/info ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
        "\n‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î)."
    )
    await update.message.reply_text(msg, reply_markup=info_keyboard)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å —Ñ–∞–π–ª–∞–º–∏/—Ç–µ–∫—Å—Ç–æ–º/—Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –∏ –ë–î, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞–≥–ª—É—à–∫–æ–π
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î).")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if context.user_data.get("manual_in_progress"):
        await update.message.reply_text("‚ùó –ó–∞–≤–µ—Ä—à—ñ—Ç—å /cancel –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—ñ—Ç—å.")
        return
    if txt == "üí° Info":
        await info(update, context)
    else:
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î).")

async def manual_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["manual_in_progress"] = True
    await update.message.reply_text("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î).")
    context.user_data.clear() # –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º ConversationHandler —Å—Ä–∞–∑—É –∂–µ

async def manual_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î).")
    context.user_data.clear()
    return ConversationHandler.END

async def manual_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î).")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º, —Ç–∞–∫–∂–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
# async def delete_check(...): pass
# async def delete_check_confirm(...): pass
# async def delete_item(...): pass
# async def delete_item_confirm(...): pass
# async def report_day(...): pass
# async def report_week(...): pass
# async def report_month(...): pass
# async def report_all(...): pass
# async def report_all_from(...): pass
# async def report_all_to(...): pass
# async def send_report(...): pass
# async def debug(...): pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. "
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ª–æ–≥–∞—Ö Render."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# ===== Main —Å run_webhook =====

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û! –≠—Ç–æ –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π.
    # init_db(DB_URL)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ë–î
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("manual", manual_start)],
        states={
            WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_name)],
            WAITING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_price)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    ))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ë–î, —Ç–∞–∫–∂–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
    # app.add_handler(CommandHandler("report_day", report_day))
    # app.add_handler(CommandHandler("report_week", report_week))
    # app.add_handler(CommandHandler("report_month", report_month))
    # app.add_handler(CommandHandler("report_all", report_all))
    # app.add_handler(CommandHandler("debug", debug))
    # app.add_handler(ConversationHandler(
    #     entry_points=[CommandHandler("delete_check", delete_check)],
    #     states={DELETE_CHECK_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_check_confirm)]},
    #     fallbacks=[CommandHandler("cancel", cancel)],
    # ))
    # app.add_handler(ConversationHandler(
    #     entry_points=[CommandHandler("delete_item", delete_item)],
    #     states={DELETE_ITEM_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_item_confirm)]},
    #     fallbacks=[CommandHandler("cancel", cancel)],
    # ))
    # app.add_handler(ConversationHandler(
    #     entry_points=[CommandHandler("report_all", report_all)],
    #     states={REPORT_ALL_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_all_from)],
    #             REPORT_ALL_TO:    [MessageHandler(filters.TEXT & ~filters.COMMAND, report_all_to)]},
    #     fallbacks=[CommandHandler("cancel", cancel)],
    # ))


    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=f"/{BOT_TOKEN}",
        webhook_url=f"{HOST_URL}/{BOT_TOKEN}"
    )

if __name__ == "__main__":
    main()
