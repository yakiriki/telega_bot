import logging
import os
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, Document
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)
import xml.etree.ElementTree as ET

from db.database import init_db, insert_expense, get_summary, delete_item, delete_receipt
from utils.parser import parse_xml
from utils.categorizer import categorize_item

TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ XML-—Ñ–∞–π–ª, —Ç–µ–∫—Å—Ç –∞–±–æ URL –∑ —á–µ–∫–æ–º.\n"
        "üßæ /summary_day ‚Äî –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –¥–µ–Ω—å\n"
        "üìÖ /summary_week ‚Äî –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        "üìÜ /summary_month ‚Äî –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "‚ûï /add –Ω–∞–∑–≤–∞,—Ü—ñ–Ω–∞,–∫–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Äî –≤—Ä—É—á–Ω—É –¥–æ–¥–∞—Ç–∏\n"
        "üóëÔ∏è /delete_item ID ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "üóëÔ∏è /delete_receipt ID ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ–∫\n"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower().startswith("http") and text.lower().endswith(".xml"):
        try:
            import httpx
            async with httpx.AsyncClient() as client:
                r = await client.get(text)
                r.raise_for_status()
            text = r.text
        except Exception:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ XML –∑–∞ URL.")
            return

    if "<CHECK" in text:
        await process_xml(update, text)
    else:
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ XML –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file: Document = update.message.document
    if not file.file_name.lower().endswith(".xml"):
        await update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–µ–Ω .xml —Ñ–∞–π–ª.")
        return
    file_obj = await file.get_file()
    file_data = await file_obj.download_as_bytearray()
    text = file_data.decode("windows-1251", errors="ignore")
    await process_xml(update, text)

async def process_xml(update: Update, text: str):
    try:
        root = ET.fromstring(text)
        items, total, receipt_id = parse_xml(root)
        user_id = update.effective_user.id
        for name, price in items:
            category = categorize_item(name)
            insert_expense(user_id, name, price, category, receipt_id)
        reply = [f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(items)} –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ —Å—É–º—É {total:.2f} –≥—Ä–Ω"]
        for idx, (name, price) in enumerate(items, 1):
            reply.append(f"{idx}. {name} ‚Äî {price:.2f} –≥—Ä–Ω")
        reply.append(f"üßæ ID —á–µ–∫—É: {receipt_id}")
        await update.message.reply_text("\n".join(reply))
    except Exception as e:
        logger.exception(e)
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ XML.")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int):
    user_id = update.effective_user.id
    start_date = (datetime.now() - timedelta(days=days - 1)).strftime("%Y-%m-%d")
    rows = get_summary(user_id, start_date)
    if not rows:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.")
        return
    reply = ["üìä –í–∏—Ç—Ä–∞—Ç–∏:"]
    total = 0
    for cat, amt in rows:
        total += amt
        reply.append(f"{cat}: {amt:.2f} –≥—Ä–Ω")
    reply.append(f"–ó–∞–≥–∞–ª–æ–º: {total:.2f} –≥—Ä–Ω")
    await update.message.reply_text("\n".join(reply))

async def summary_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await summary(update, context, 1)

async def summary_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await summary(update, context, 7)

async def summary_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await summary(update, context, 30)

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = update.message.text.replace("/add", "", 1).strip().split(",")
        if len(args) != 3:
            raise ValueError
        name, price, category = args
        price = float(price)
        insert_expense(update.effective_user.id, name, price, category, "manual")
        await update.message.reply_text("‚úÖ –î–æ–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É.")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add –Ω–∞–∑–≤–∞,—Ü—ñ–Ω–∞,–∫–∞—Ç–µ–≥–æ—Ä—ñ—è")

async def delete_item_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        item_id = int(context.args[0])
        delete_item(item_id)
        await update.message.reply_text(f"üóëÔ∏è –¢–æ–≤–∞—Ä {item_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /delete_item ID")

async def delete_receipt_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        receipt_id = context.args[0]
        delete_receipt(receipt_id)
        await update.message.reply_text(f"üóëÔ∏è –ß–µ–∫ {receipt_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /delete_receipt ID")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("summary_day", summary_day))
    app.add_handler(CommandHandler("summary_week", summary_week))
    app.add_handler(CommandHandler("summary_month", summary_month))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("delete_item", delete_item_cmd))
    app.add_handler(CommandHandler("delete_receipt", delete_receipt_cmd))
    app.add_handler(MessageHandler(filters.Document.XML, handle_file))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
